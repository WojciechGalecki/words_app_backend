---
# create_or_update_word tests
- name: 'create_or_update_word - when no body expect http status 400'
  endpoint:
    method: POST
    path: /words
  request:
    headers:
      'Content-Type': application/json
  response:
    status: 400
    body: '{"message": "Invalid request body"}'

- name: 'create_or_update_word - when empty body expect http status 400'
  endpoint:
    method: POST
    path: /words
  request:
    headers:
      'Content-Type': application/json
    body: {}
  response:
    status: 400
    body: '{"message": "Invalid request body"}'

- name: 'create_or_update_word - when body without required parameter expect http status 400'
  endpoint:
    method: POST
    path: /words
  request:
    headers:
      'Content-Type': application/json
    body: '{"userId": "1", "word": "test"}'
  response:
    status: 400
    body: '{"message": "Invalid request body"}'

- name: 'create_or_update_word - when valid body expect http status 200'
  endpoint:
    method: POST
    path: /words
  request:
    headers:
      'Content-Type': application/json
    body: '{"userId": "serverless", "word": "test", "definitions": ["test"]}'
  response:
    status: 200

# delete_word tests
- name: 'delete_word - when no required query params expect http status 400'
  endpoint:
    method: DELETE
    path: /words
  response:
    status: 400
    body: '{"error": "Missing required parameters: userId, word"}'

- name: 'delete_word - when only one required query parameter expect http status 400'
  endpoint:
    method: DELETE
    path: /words?userId=test
  response:
    status: 400
    body: '{"error": "Missing required parameters: userId, word"}'

- name: 'delete_word - when deleting not existing item expect http status 404'
  endpoint:
    method: DELETE
    path: /words?userId=test&word=test
  response:
    status: 404

#- name: 'delete_word - when deleting existing item expect http status 200'
#  endpoint:
#    method: DELETE
#    path: /words?userId=serverless&word=test
#  response:
#    status: 200

# get_all_words tests
- name: 'get_all_words - when no required query parameter expect http status 400'
  endpoint:
    method: GET
    path: /words
  response:
    status: 400
    body: '{"error": "Missing required parameter: userId"}'

- name: 'get_all_words - when getting all words for not existing user expect http status 200 and empty list'
  endpoint:
    method: GET
    path: /words?userId=notExists
  response:
    status: 200
    body: '[]'

#- name: 'get_all_words - when getting all words for existing user expect http status 200 and list of items'
#  endpoint:
#    method: GET
#    path: /words?userId=testGetAll
#  response:
#    status: 200
#    body: '[{"word": "test", "definitions": ["test"}]'
